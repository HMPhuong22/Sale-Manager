document.addEventListener('DOMContentLoaded', function () {
    // m·∫£ng JavaScript ch·ª©a th√¥ng tin s·∫£n ph·∫©m
    // var productData = @json($dataListPro);
    var productData = JSON.parse(document.getElementById('productData').textContent);

    // ·∫©n b·∫£ng nh·∫≠p h√†ng
    function showProductButtons() {
        document.getElementById('productDetailsSection').classList.remove('hidden');

        // T·∫°o m√£ h√≥a ƒë∆°n v√† hi·ªÉn th·ªã th·ªùi gian th·ª±c
        var now = new Date();
        var invoiceCode = "HD" + now.getFullYear() +
            ("0" + (now.getMonth() + 1)).slice(-2) +
            ("0" + now.getDate()).slice(-2) +
            ("0" + now.getHours()).slice(-2) +
            ("0" + now.getMinutes()).slice(-2) +
            ("0" + now.getSeconds()).slice(-2) +
            ("00" + now.getMilliseconds()).slice(-3);
        document.getElementById('invoiceCode').value = invoiceCode;

        // Hi·ªÉn th·ªã th·ªùi gian th·ª±c c·ªßa v√πng H√† N·ªôi
        var options = {
            timeZone: 'Asia/Ho_Chi_Minh',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        };
        var formatter = new Intl.DateTimeFormat([], options);

        // L·∫•y c√°c ph·∫ßn t·ª≠ c·ªßa ng√†y gi·ªù t·ª´ ƒë·ªëi t∆∞·ª£ng Date
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0, n√™n c·∫ßn c·ªông th√™m 1
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');
        var seconds = String(now.getSeconds()).padStart(2, '0');

        // T·∫°o chu·ªói ng√†y gi·ªù theo ƒë·ªãnh d·∫°ng "yyyy-MM-ddThh:mm"
        var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;

        // hi·ªÉn th·ªã chu·ªói th·ªùi gian v·ª´a ƒë∆∞·ª£c t·∫°o
        document.getElementById('invoiceDate').value = formatter.format(now);
    }

    // T√≠nh t·ªïng gi√° tr·ªã nh·∫≠p h√†ng
    function calculateTotalAmount() {
        let totalAmount = 0;
        document.querySelectorAll('.product-row').forEach(function (row) {
            let quantity = parseFloat(row.querySelector('input[name="products[][quantity]"]').value) || 0;
            let priceImport = parseFloat(row.querySelector('input[name="products[][priceImport]"]').value) || 0;
            totalAmount += quantity * priceImport;
        });
        document.getElementById('totalAmount').value = totalAmount.toFixed(
            2); // Hi·ªÉn th·ªã t·ªïng ti·ªÅn v·ªõi 2 ch·ªØ s·ªë th·∫≠p ph√¢n
    }

    // Th√™m h√†ng
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addRow').addEventListener('click', function () {
            var newRow = `
                        <tr id="eventCancel" class="product-row">
                            <td style="vertical-align: middle;">
                                <select class="form-control" name="products[][code]">
                                    @foreach ($dataListPro as $item)
                                        <option value="{{ $item->id_sanpham }}">{{ $item->ma_sanpham }}</option>
                                    @endforeach
                                </select>
                            </td>
                            <td><input type="text" class="form-control product-name" name="products[][name]" placeholder="T√™n s·∫£n ph·∫©m" readonly></td>
                            <td><input type="number" class="form-control " name="products[][quantity]" placeholder="S·ªë l∆∞·ª£ng"></td>
                            <td><input type="text" class="form-control " name="products[][priceImport]" placeholder="Gi√° nh·∫≠p"></td>
                            <td style="vertical-align: middle;">
                                <select class="form-control" name="products[][unit]">
                                    @foreach ($listLocals as $item)
                                        <option value="{{ $item->id_nhacungcap }}">{{ $item->ten_nhacungcap }}</option>
                                    @endforeach
                                </select>
                            </td>
                            <td><button type="button" class="btn btn-danger removeRow" >üóëÔ∏è</button></td>
                        </tr>`;
            document.getElementById('invoiceDetails').insertAdjacentHTML('beforeend', newRow);
            addRemoveRowEvent();
            calculateTotalAmount(); // T√≠nh l·∫°i t·ªïng gi√° tr·ªã nh·∫≠p h√†ng sau khi th√™m h√†ng
        });

        // X·ª≠ l√Ω s·ª± ki·ªán x√≥a b·ªõt item
        function addRemoveRowEvent() {
            document.querySelectorAll('.removeRow').forEach(button => {
                button.addEventListener('click', function () {
                    this.closest('tr').remove();
                    calculateTotalAmount(); // T√≠nh l·∫°i t·ªïng gi√° tr·ªã nh·∫≠p h√†ng sau khi x√≥a h√†ng
                });
            });

            document.querySelectorAll('select[name="products[][code]"]').forEach(function (select) {
                select.addEventListener('change', function () {
                    var selectedProduct = productData.find(product => product.id_sanpham == this
                        .value);
                    var row = this.closest('tr');
                    row.querySelector('.product-name').value = selectedProduct ? selectedProduct
                        .ten_sanpham : '';
                });
            });
        }
        addRemoveRowEvent();
    });

    // S·ª± ki·ªán n√∫t "Cancel"
    document.querySelector('.btn-secondary').addEventListener('click', function () {
        document.getElementById('eventCancel').innerHTML = '';
    });

    // G·ª≠i d·ªØ li·ªáu ƒë·∫øn controller khi nh·∫•p v√†o n√∫t Submit
    document.getElementById('invoiceForm').addEventListener('submit', function (event) {
        event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông submit m·∫∑c ƒë·ªãnh

        // Thu th·∫≠p d·ªØ li·ªáu s·∫£n ph·∫©m v√† l∆∞u v√†o m·∫£ng d·ªØ li·ªáu
        var products = [];
        document.querySelectorAll('.product-row').forEach(function (row) {
            var product = {
                code: row.querySelector('select[name="products[][code]"]').value,
                name: row.querySelector('input[name="products[][name]"]').value,
                quantity: row.querySelector('input[name="products[][quantity]"]').value,
                priceImport: row.querySelector('input[name="products[][priceImport]"]').value,
                unit: row.querySelector('select[name="products[][unit]"]').value
            };
            products.push(product);
        });

        // Thu th·∫≠p d·ªØ li·ªáu h√≥a ƒë∆°n
        var invoiceData = {
            supplierId: document.getElementById('supplierSelect').value,
            invoiceCode: document.getElementById('invoiceCode').value,
            invoiceDate: document.getElementById('invoiceDate').value,
            totalAmount: document.getElementById('totalAmount').value,
            products: products,
        };

        console.log(invoiceData);

        // G·ª≠i d·ªØ li·ªáu b·∫±ng AJAX
        fetch("{{ route('admin.quanly.addProduct') }}", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token() }}'
            },
            body: JSON.stringify(invoiceData)
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    });

    document.getElementById('submitInvoice').addEventListener('click', showProductButtons);
})